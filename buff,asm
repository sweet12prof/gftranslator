lbi     $1  56      
lbi     $11 16  
LD_S    $2 0($0)
STO_S   $2 0($1)    
LD_S    $3 1($0)                        
STO_s    $3 1($1)                                        
LD_S    $4 2($0)
STO_S   $4 2($1)                                                            
LD_S    $5 3($0)                                        
STO_S   $5 3($1)                                            
LBI     $2 4    
and_s   $3 $0 
lbi     $3 3    
addi    $1 4  
loop:   ld_s $4 -1($1)    
ld_s    $5 -4($1)          
setmvtype 1               
mv_s    $6 $2             
and_s   $6 $3             
bne     $6 notmultipleof4 
J multipleof4
notmultipleof4: xor_s $4 $5  
LD_s $4 0($1)              
addi $2 1                           
addi $1 4                  
lbi $7 44                   
and_s $7 $2                  
beq $7 end                 
J loop                      
end: J END_                
multipleof4: setsrtype 1   
sr_s $0 $4                   
setfx 0x1b                  
dupi_s $7 01
div_s $4  $7                 
setfx 0x01                 
dupi_s $6 0x1F             
mul_s $4 $6                   
dupi_s $6 0x63              
xor_s $4 $6                  
ld_s $8 0($11)               
addi $11 4                 
xor_s $4 $8                  
xor_s $4 $5                  
ld_s $4 0($1)              
addi $2 1                  
addi $1 4                   
lbi $7 44                   
and_s $7 $2                  
beq $7 end1                 
J loop                      
end1: J END_                  
END_: J  END_               

.data
.text
lbi     $1  56     ;gen_KEYS STARTS FROM MEM[16]
lbi     $11 16    ;rcon  
LD_S    $2 0($0)   ;$2 = MEM[0]
STO_S   $2 0($1)   ;MEM[56] = $2
LD_S    $3 1($0)   ;$3 = MEM[4]
STO_    $3 1($1)   ;MEM[60] = $3
LD_S    $4 2($0)   ;$4 = MEM[8]
STO_S   $4 2($1)   ;MEM[64]= $4
LD_S    $5 3($0)   ;$5 = MEM[12]
STO_S   $5 3($1)   ;MEM[68] = $5

LBI $2 4    ; reg2 holding the current word out of 44 being processed
and_s $3 $0 ;reg3 is going to hold the mask for mod 4 check
lbi $3 3    ; (0.....11) helps us do determine if value is multiple of 4 or not
addi $1 16   ; increment base address to next word 

;setting up for rcon 
;setsrtype 2 ;  srtype specifies shift-left of rightmost byte
;lbi $9 1    ;  $9 = RCONST
;lbi $8 3    ;  $8 for conditioning of $9. $9(Byte)<< 3 
;sr_s $9 $8    ; creates first rcon in $9

loop: ld_s $4 -1($1)      ;most recent word 
ld_s  $5 -4($1)         ;4th word backwards from current word
setmvtype 1             ;copy reg
mv_s  $6 $2             ;$6 is a temp that holds current iteration count
and_s $6 $3             ;if itertion count is multiple of $4 $6 will be 0
bne   $6 notmultipleof4 
J multipleof4
notmultipleof4: xor $4 $5  ;w[i] = w[i-1] xor w[i-4]
LD_s $4 0($1)              ;MEM[$1] = $4
addi $2 1                  ;increment iteration count         
addi $1 4                  ;increment memory pointer to next word
lbi $7 44                  ;load $7 with final iteration count 
and $7 $2                  ; check if we are at final iteration count
beq $7 end                 ; if $7 is 0 we branch to end sincelast word has been processed
J loop                     ;if the final count hasnt been reached jump back to Loop
end: J END_                ; Jump to end

multipleof4: setsrtype 0   ; prep for byte circular shift; sr_aes_top
sr_s $0 $4                 ;$4 is circular shift 1 byte right  
setfx 0x1b                 ;set irreducible polynomial to 11b 
inv_s $4                   ; gf inversion
setfx 0x01                 ;irreducible polynomial to 0x01 for 1f multiply
dupi_s $6 0x1F             ;1f dupi
mul $4 $6                  ; gf multiply by 1f 
dupi_s $6 0x63             ;63 dupi 
add $4 $6                  ;add to 0x63
ld $8 0($11)               ;get next rcon
addi $11 4                 ;increment to next rcon for next iteration
xor $4 $8                  ;xor with curreent rcon 
xor $4 $5                  ;xor temp $4 with w[i-4]. w[i] = w[i-1] xor w[i-4]
ld_s $4 0($1)              ;push calculated roundkey to top of queue
addi $2 1                  ;increment iteration counter
addi $1 4                  ;increment memory pointer 
lbi $7 44                  ; load $7 with final iteration count 
and $7 $2                  ; check if $2 is at final count
beq $7 end                 ;branch to end if it is 
J loop                     ;Jump to loop if it isnt 
end: J END_                ;Jump to rnf 
END_: J  END_              ;iterate forever


;AES KERNEL STARTS HERE
lbi $1 56                  ;reset $1 to start of expansion keys 
lbi $2 232                 ;$2 now points to starting address of Plaintext
lbi $sp 512                ;$3 as stack pointer

;get aes plaintext
ld_s $4 0($2)
ld_s $5 1($2)
ld_s $6 2($2)
ld_s $7 3($2)